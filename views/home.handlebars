<script>
  {
    $(function () {
      $('.tool').draggable();
    });

    $(function () {
      $('well').draggable();
    })

    $(function () {
      let cloneId = 0;

      $("#stackIcon").click(function () {
        $("#stackIcon")
          .clone()
          .appendTo("#well0")
          .draggable({
            cancel: false,
            containment: "document"
          })
          .attr('class', 'stack created')
          .attr('id', 'id' + cloneId++)
          .droppable();
      })
    });



    $(function () {
      $("#panelIcon").click(function () {
        $("#panelIcon").clone().appendTo("#well0").draggable({ cancel: false }).droppable();
      })
    });

    $(function () {
      $("#cornerIcon").click(function () {
        $("#cornerIcon").clone().appendTo("#well0").draggable({ cancel: false });
      })
    });

    $(function () {
      let flag = false;
      $('#panelIcon').click(function () {
        if (flag === false) {
          $("#panelForm").css("visibility", "visible");
        } else {
          $("#panelForm").css("visibility", "hidden");
          flag = false;
        }
      })
    })
  }
</script>



<div class="container">

  <h1>Welcome to the Stock Yard</h1>
  <div class="row">

    <div class="column1 left">

      <h2>Icons</h2>

      <form id="stackIcon" name="stackIcon" class="stack" action="/api/stack" method="POST" onsubmit="return false;"
        target="stackSaved">
        <input type="hidden" name="left" value="">
        <input type="hidden" name="top" value="">
      </form>
      {{!-- A hack to keep the page from redirecting to each saved stack. Saves the stack information sent back --}}
      <iframe name="stackSaved" display="none" style="width:0; height:0; border:0; border:none"></iframe>

      {{!-- These can't be forms if I want to nest them in the stack forms
      Make them divs? --}}
      <button id="panelIcon" class="panel"></button>
      <button id="cornerIcon" class="corner"></button>

      <form id="panelForm" class="submission-form" style="visibility: hidden;">
        <label for="size">Size:</label>
        <input type="text" name="size" autocomplete="off">
        <label for="tieStrips">Tie Strips:</label>
        <input type="text" name="tieStrips" autocomplete="off">
        <label for="linerType">Liner Type:</label>
        <input type="text" name="linerType" autocomplete="off">
        <label for="dowels">Dowels:</label>
        <input type="checkbox" name="dowels" autocomplete="off">
        <label for="r6">R6:</label>
        <input type="checkbox" name="r6" autocomplete="off">
        <label for="bigTies">Big Ties:</label>
        <input type="checkbox" name="bigTies" autocomplete="off">
        <label for="wall">Wall:</label>
        <input type="text" name="wall" autocomplete="off">
        <input type="submit" value="Send">
      </form>

    </div>
    <div class="column2 right">

      <h2>Storage Space</h2>

      <h2>The Well</h2>
      <div id="well0" class="well"></div>

    </div>

    <nav id="context-menu" class="context-menu">
      <ul class="context-menu__items">
        <li class="context-menu__item">
          <div class="context-menu__link view">
            <i class="fa fa-eye"></i> View Stack
          </div>
        </li>
        <li class="context-menu__item">
          <div class="context-menu__link edit">
            <i class="fa fa-edit"></i> Edit Stack
          </div>
        </li>
        <li class="context-menu__item">
          <div class="context-menu__link delete">
            <i class="fa fa-trash"></i> Delete Stack
          </div>
        </li>
      </ul>
    </nav>

  </div>
</div>

<script>

  let well = document.body.children[1].children[1].children[1].children[2];
  let wellChildrenElements = document.body.children[1].children[1].children[1].children[2].children;

  //<-------------------------- start of Stacks ----------------------->

  let stackItemClassName = 'dropped'
  let menu = document.querySelector("#context-menu");
  let menuState = 0;
  let activeClassName = "context-menu--active";
  let menuPosition;
  let menuPositionX;
  let menuPositionY;
  let menuWidth;
  let menuHeight;
  let windowWidth;
  let windowHeight;
  let clickCoords;
  let clickCoordsX;
  let clickCoordsY;
  let rightClickedStack;


  //Saves the position of the stacks dragged into the sector view
  document.addEventListener('click', (event) => {
    if (event.target !== well) return;
    let stacksArray = [...wellChildrenElements];
    if (stacksArray.length === [].length) {
      console.log("No stacks in the Yard");
    }
    else {
      for (let index = 0; index <= stacksArray.length - 1; index++) {
        let dragposition = {
          left: stacksArray[index].style.left,
          top: stacksArray[index].style.top
        };

        stacksArray[index].classList.add("dropped");
        stacksArray[index].children[0].value = dragposition.left;
        stacksArray[index].children[1].value = dragposition.top;

        console.log(stacksArray[index])
        console.log(stacksArray[index].children[0].value);
        console.log(stacksArray[index].children[1].value);
      }
    }
  });

  //Saves a newly created stack by left-clicking on stack
  document.addEventListener('click', (event) => {
    if (!event.target.classList.contains('dropped')) {
      return;
    } else {
      event.target.submit();
      alert('The stack is saved')
    }
  });

  //get the stacks in the sector from the database
  window.addEventListener('load', (event) => {
    let xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200) {
        //.parse() converts the response to a JS object
        let stacks = JSON.parse(xhttp.responseText);
        console.log(stacks)
        stacks.forEach((stack, index) => {
          let well = document.body.children[1].children[1].children[1].children[2];
          let form = document.createElement('form');
          form.setAttribute('id', stack._id);
          form.setAttribute('name', 'stackIcon');
          form.setAttribute('class', 'stack created draggable ui-droppable dropped');
          form.setAttribute('action', '/api/stack');
          form.setAttribute('method', 'POST');
          form.setAttribute('onsubmit', 'return false;');
          form.setAttribute('target', 'stackSaved');
          let leftInput = document.createElement('input');
          leftInput.setAttribute('type', 'hidden');
          leftInput.setAttribute('name', 'left');
          leftInput.setAttribute('value', stack.leftPosition);
          let topInput = document.createElement('input');
          topInput.setAttribute('type', 'hidden');
          topInput.setAttribute('name', 'top');
          topInput.setAttribute('value', stack.topPosition);
          form.appendChild(leftInput);
          form.appendChild(topInput);
          form.style.left = stack.leftPosition;
          form.style.top = stack.topPosition;
          well.appendChild(form);
        });
      }
    };

    xhttp.open("GET", "http://localhost:3000/api/stacks", true);
    xhttp.send();
  });

  //deletes a stack from the sector
  document.addEventListener('click', (event) => {
    if (!event.target.classList.contains('delete')) {
      return;
    } else {
      let xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          //let stacks = JSON.parse(xhttp.responseText);
          //console.log(stacks);
        }
      }
      //console.log(event.target.parentNode.parentNode.parentNode.parentNode.children[1].children[2])
      console.log(rightClickedStack.id)
      xhttp.open("DELETE", "http://localhost:3000/api/stack/" + rightClickedStack.id, true);
      xhttp.send();
    }
  });


  // <-------------------start of Context Menu ------------------------>

  document.addEventListener('contextmenu', (e) => {
    rightClickedStack = clickInsideElement(e, stackItemClassName)
    console.log("this is rightClickedStack " + rightClickedStack.id)
    if (rightClickedStack) {
      e.preventDefault();
      toggleMenuOn();
      positionMenu(e);
    } else {
      toggleMenuOff();
    }
  });

  function clickInsideElement(e, className) {
    let el = e.target;

    if (el.classList.contains(className)) {
      return el;
    } else {
      while (el = el.parentNode) {
        if (el.classList && el.classList.contains(className)) {
          return el
        }
      }
    }
    return false;
  }


  function toggleMenuOn() {
    if (menuState !== 1) {
      menuState = 1;
      menu.classList.add(activeClassName);
    }
  }

  function toggleMenuOff() {
    if (menuState !== 0) {
      menuState = 0;
      menu.classList.remove(activeClassName);
    }
  }

  //closes the stack context menu with a left click
  document.addEventListener('click', (event) => {
    let button = event.button;
    if (button === 0) {
      toggleMenuOff();
    }
  })

  //escapes the context menu for the stack (Esc button)
  window.addEventListener('keyup', (event) => {
    if (event.keyCode === 27) {
      toggleMenuOff();
    }
  });

  //gets the position of the right click on the document
  function getPosition(e) {
    let posx = 0;
    let posy = 0;

    if (!e) {
      let e = window.event;
    }

    if (e.pageX || e.pageY) {
      posx = e.pageX;
      posy = e.pageY;
    } else if (e.clientX || e.clientY) {
      posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
      posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
    }

    return {
      x: posx,
      y: posy
    }
  }

  //positions the context menu of the stack
  function positionMenu(e) {
    clickCoords = getPosition(e);
    clickCoordsX = clickCoords.x;
    clickCoordsY = clickCoords.y;

    menuWidth = menu.offsetWidth + 4;
    menuHeight = menu.offsetHeight + 4;

    windowWidth = window.innerWidth;
    windowHeight = window.innerHeight;

    if ((windowWidth - clickCoordsX) < menuWidth) {
      menu.style.left = windowWidth - menuWidth + "px";
    } else {
      menu.style.left = clickCoordsX + "px";
    }

    if ((windowHeight - clickCoordsY) < menuHeight) {
      menu.style.top = windowHeight - menuHeight + "px";
    } else {
      menu.style.top = clickCoordsY - 120 + "px";
    }
  }

  window.addEventListener('onresize', () => {
    toggleMenuOff();
  });

  //<---------------------- end of Context Menu ----------------------->
  //<----------------------end of Stacks ------------------------------>

  //<----------------------start of Panels ---------------------------->

</script>