<script>
  {
    $(function () {
      $('.tool').draggable();
    });

    $(function () {
      $('well').draggable();
    })

    $(function () {
      let cloneId = 0;

      $("#stackIcon").click(function () {
        $("#stackIcon")
          .clone()
          .appendTo("#well0")
          .draggable({
            cancel: false,
            containment: "document"
          })
          .attr('class', 'stack created')
          .attr('id', 'id' + cloneId++)
          .droppable();
      })
    });



    $(function () {
      $("#panelIcon").click(function () {
        $("#panelIcon").clone().appendTo("#well0").draggable({ cancel: false }).droppable();
      })
    });

    $(function () {
      $("#cornerIcon").click(function () {
        $("#cornerIcon").clone().appendTo("#well0").draggable({ cancel: false });
      })
    });

    $(function () {
      let flag = false;
      $('#panelIcon').click(function () {
        if (flag === false) {
          $("#panelForm").css("visibility", "visible");
        } else {
          $("#panelForm").css("visibility", "hidden");
          flag = false;
        }
      })
    })
  }
</script>



<div class="container">

  <h1>Welcome to the Stock Yard</h1>
  <div class="row">

    <div class="column1 left">

      <h2>Icons</h2>

      <form id="stackIcon" name="stackIcon" class="stack" action="/api/stack" method="POST" onsubmit="return false;"
        target="stackSaved">
        <input type="hidden" name="left" value="">
        <input type="hidden" name="top" value="">
      </form>
      {{!-- A hack to keep the page from redirecting to each saved stack. Saves the stack information sent back --}}
      <iframe name="stackSaved" display="none" style="width:0; height:0; border:0; border:none"></iframe>

      {{!-- These can't be forms if I want to nest them in the stack forms
      Make them divs? --}}
      <button id="panelIcon" class="panel"></button>
      <button id="cornerIcon" class="corner"></button>

      <form id="panelForm" class="submission-form" style="visibility: hidden;">
        <label for="size">Size:</label>
        <input type="text" name="size" autocomplete="off">
        <label for="tieStrips">Tie Strips:</label>
        <input type="text" name="tieStrips" autocomplete="off">
        <label for="linerType">Liner Type:</label>
        <input type="text" name="linerType" autocomplete="off">
        <label for="dowels">Dowels:</label>
        <input type="checkbox" name="dowels" autocomplete="off">
        <label for="r6">R6:</label>
        <input type="checkbox" name="r6" autocomplete="off">
        <label for="bigTies">Big Ties:</label>
        <input type="checkbox" name="bigTies" autocomplete="off">
        <label for="wall">Wall:</label>
        <input type="text" name="wall" autocomplete="off">
        <input type="submit" value="Send">
      </form>

    </div>
    <div class="column2 right">

      <h2>Storage Space</h2>

      <h2>The Well</h2>
      <div id="well0" class="well"></div>

    </div>
  </div>
</div>

<script>

  let well = document.body.children[1].children[1].children[1].children[2];
  let wellChildrenElements = document.body.children[1].children[1].children[1].children[2].children
  document.addEventListener('click', (event) => {
    if (event.target !== well) return;
    let stacksArray = [...wellChildrenElements];
    //add a for loop for length of stacksArray
    // for each element in the array, 
    if (stacksArray.length === [].length) {
      console.log("No stacks in the Yard");
    }
    else {
      for (let index = 0; index <= stacksArray.length - 1; index++) {
        // mutate the left and top style parameter's values
        // create an object dragposition with two properties(left and top)
        let dragposition = {
          left: stacksArray[index].style.left,
          top: stacksArray[index].style.top
        };

        stacksArray[index].classList.add("dropped");
        stacksArray[index].children[0].value = dragposition.left;
        stacksArray[index].children[1].value = dragposition.top;

        console.log(stacksArray[index])
        console.log(stacksArray[index].children[0].value);
        console.log(stacksArray[index].children[1].value);
      }
    }
  });

  //Saves a newly created stack
  document.addEventListener('click', (event) => {
    if (!event.target.classList.contains('dropped')) {
      return;
    } else {
      event.target.submit();
      alert('The stack is saved')
    }
  });

  //load the stacks in the sector
  window.addEventListener('load', (event) => {
    console.log("Hey")
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200) {
        //.parse converts the response to a JS object
        let stacks = JSON.parse(xhttp.responseText);
        console.log(stacks);
      }
    };

    xhttp.open("GET", "http://localhost:3000/api/stacks", true);
    xhttp.send();
  })

</script>