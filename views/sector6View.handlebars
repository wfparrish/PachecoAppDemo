<script>
  {
    $(function () {
      $('.tool').draggable();
    });

    $(function () {
      $('well').draggable();
    })

    $(function () {
      let cloneId = 0;

      $("#stackIcon").click(function () {
        $("#stackIcon")
          .clone()
          .appendTo("#well0")
          .draggable({
            cancel: false,
            containment: "document"
          })
          .attr('class', 'stack created')
          .attr('id', 'id' + cloneId++)
          .droppable();
      })
    });


    //submit panels to the panels collection, assigns panelIconClone as 
    //the id to clones when they are put in well
    $(function () {
      $("#panelIcon").click(function () {
        $("#panelIcon")
          .clone()
          .appendTo("#well0")
          .draggable({ cancel: false })
          .attr('id', 'panelIconClone')
          .droppable()
          .css("visibility", "hidden");

        //code that makes the panel clone visible in the well
        //and hides the dataForm so you can't add another panel clone 
        //without selecting the panel icon
        let dataForm = document.getElementById('dataForm');
        let well = document.body.children[1].children[1].children[1].children[2];
        dataForm.addEventListener('submit', () => {
          well.lastElementChild.style.visibility = "visible";
          dataForm.style.visibility = "hidden";
        })
      })
    });

    $(function () {
      $("#cornerIcon").click(function () {
        $("#cornerIcon").clone().appendTo("#well0").draggable({ cancel: false });
      })
    });

    $(function () {
      let flag = false;
      $('#panelIcon').click(function () {
        if (flag === false) {
          $("#dataForm").css("visibility", "visible");
        } else {
          $("#dataForm").css("visibility", "hidden");
          flag = false;
        }
      })
    })
  }
</script>



<div class="container">

  <h1>Sector 6</h1>
  <div class="row">

    <div class="column1 left">

      <h2>Icons</h2>

      <form id="stackIcon" name="stackIcon" class="stack" action="/api/sector6/stack" method="POST"
        onsubmit="return false;" target="stackSaved">
        <input type="hidden" name="left" value="">
        <input type="hidden" name="top" value="">
      </form>
      {{!-- A hack to keep the page from redirecting to each saved stack. Saves the stack information sent back --}}
      <iframe id="stackIframe" name="stackSaved" display="none"
        style="width:0; height:0; border:0; border:none"></iframe>
      <iframe id="panelIframe" name="panelSaved" display="none"
        style="width:0; height:0; border:0; border:none"></iframe>

      {{!-- These can't be forms if I want to nest them in the stack forms
      Make them divs? --}}
      <div id="panelIcon" class="panel"></div>
      <div id="cornerIcon" class="corner"></div>

      <form id="dataForm" name="dataForm" class="submission-form" action="/api/sector6/panel" method="POST"
        target="panelSaved" style="visibility: hidden;">

        <label for="size">Size:</label>
        <input type="text" name="size" autocomplete="off" required="required">
        <label for="tieStrips">Tie Strips:</label>
        <input type="text" name="tieStrips" autocomplete="off" required="required">
        <label for="linerType">Liner Type:</label>
        <input type="text" name="linerType" autocomplete="off" required="required">
        <label for="dowels">Dowels:</label>
        <input type="checkbox" name="dowels" autocomplete="off">
        <label for="r6">R6:</label>
        <input type="checkbox" name="r6" autocomplete="off">
        <label for="bigTies">Big Ties:</label>
        <input type="checkbox" name="bigTies" autocomplete="off">
        <label for="wall">Wall:</label>
        <input type="text" name="wall" autocomplete="off">
        <input type="submit" value="Send">
      </form>

      <div class="retrievedStack">
        <ul id="stack__Ui" class="retrievedStack__slots">
        </ul>
      </div>

    </div>
    <div class="column2 right">

      <h2>Storage Space</h2>

      <h2>The Well</h2>
      <div id="well0" class="well"></div>

      <div id="control-panel" class="control-panel">
        <div class="control-panel__button">Save New Stacks</div>
        <div id="control-panel__btn__2" class="control-panel__button">Find Saved Panel</div>

      </div>

    </div>

    <nav id="context-menu" class="context-menu">
      <ul class="context-menu__items">
        <li class="context-menu__item">
          <div class="context-menu__link view">
            <i class="fa fa-eye"></i> View Stack
          </div>
        </li>
        <li class="context-menu__item">
          <div class="context-menu__link edit">
            <i class="fa fa-edit"></i> Edit Stack
          </div>
        </li>
        <li class="context-menu__item">
          <div class="context-menu__link delete">
            <i class="fa fa-trash"></i> Delete Stack
          </div>
        </li>
      </ul>
    </nav>

  </div>
</div>


<nav class="nav__bar">
  <ul class="nav__links">

    <li id="link__0" class="nav__link">
      <div class="nav__link__badge">Home</div>
    </li>
    <li id="link__1" class="nav__link">
      <div class="nav__link__badge">1</div>
    </li>
    <li id="link__2" class="nav__link">
      <div class="nav__link__badge">2</div>
    </li>
    <li id="link__3" class="nav__link">
      <div class="nav__link__badge">3</div>
    </li>
    <li id="link__4" class="nav__link">
      <div class="nav__link__badge">4</div>
    </li>
    <li id="link__5" class="nav__link">
      <div class="nav__link__badge">5</div>
    </li>
    <li id="link__6" class="nav__link">
      <div class="nav__link__badge">6</div>
    </li>
    <li id="link__7" class="nav__link">
      <div class="nav__link__badge">7</div>
    </li>
    <li id="link__8" class="nav__link">
      <div class="nav__link__badge">8</div>
    </li>
    <li id="link__9" class="nav__link">
      <div class="nav__link__badge">9</div>
    </li>
    <li id="link__10" class="nav__link">
      <div class="nav__link__badge">10</div>
    </li>
    <li id="link__11" class="nav__link">
      <div class="nav__link__badge">11</div>
    </li>
    <li id="link__12" class="nav__link">
      <div class="nav__link__badge">12</div>
    </li>
    <li id="link__13" class="nav__link">
      <div class="nav__link__badge">13</div>
    </li>
    <li id="link__14" class="nav__link">
      <div class="nav__link__badge">14</div>
    </li>
    <li id="link__15" class="nav__link">
      <div class="nav__link__badge">15</div>
    </li>
  </ul>
</nav>

<script>

  let well = document.body.children[1].children[1].children[1].children[2];
  let wellChildrenElements = document.body.children[1].children[1].children[1].children[2].children;
  let controlPanel = document.body.children[1].children[1].children[1].children[3];
  let controlPanelSaveStacksBtn = document.body.children[1].children[1].children[1].children[3].children[0];

  //<-------------------------- start of Stacks ----------------------->

  let stackItemClassName = 'dropped'
  let menu = document.querySelector("#context-menu");
  let menuState = 0;
  let activeClassName = "context-menu--active";
  let menuPosition;
  let menuPositionX;
  let menuPositionY;
  let menuWidth;
  let menuHeight;
  let windowWidth;
  let windowHeight;
  let clickCoords;
  let clickCoordsX;
  let clickCoordsY;
  let rightClickedStack;


  //Saves the position of the elements dragged into the sector view
  //Also makes every element in the sector a member of .saveSector
  document.addEventListener('click', (event) => {
    if (event.target !== controlPanelSaveStacksBtn) return;
    //console.log(controlPanelSaveStacksBtn);
    let sectorElementsArray = [...wellChildrenElements];
    if (sectorElementsArray.length === [].length) {
      //console.log("No stacks in the Yard");
    }
    else {
      for (let index = 0; index <= sectorElementsArray.length - 1; index++) {
        let dragposition = {
          left: sectorElementsArray[index].style.left,
          top: sectorElementsArray[index].style.top
        };
        if (sectorElementsArray[index].classList.contains('stack')) {
          sectorElementsArray[index].classList.add("dropped");
          sectorElementsArray[index].classList.add("saveSector");
          sectorElementsArray[index].children[0].value = dragposition.left;
          sectorElementsArray[index].children[1].value = dragposition.top;
          //Saves a newly created stack by left-clicking on stack
          sectorElementsArray[index].submit();
          location.reload();
        } else {
          sectorElementsArray[index].classList.add("saveSector");
          sectorElementsArray[index].style.left = dragposition.left;
          sectorElementsArray[index].style.top = dragposition.top;
        }
      }
    }
  });

  //Saves a newly created stack by left-clicking on stack
  document.addEventListener('click', (event) => {
    if (!event.target.classList.contains('dropped')) {
      return;
    } else {
      event.target.submit();
      location.reload();
    }
  });

  //get the stacks in the sector from the database
  window.addEventListener('load', (event) => {
    let xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200) {
        //.parse() converts the response to a JS object
        let stacks = JSON.parse(xhttp.responseText);
        stacks.forEach((stack, index) => {
          let well = document.body.children[1].children[1].children[1].children[2];
          let form = document.createElement('form');
          form.setAttribute('id', stack._id);
          form.setAttribute('name', 'stackIcon');
          form.setAttribute('class', 'stack draggable droppable dropped');
          form.setAttribute('action', `/api/sector6/stack/${stack._id}`);
          form.setAttribute('method', 'GET');
          form.setAttribute('onsubmit', 'return false;');
          form.setAttribute('target', 'stackSaved');
          let leftInput = document.createElement('input');
          leftInput.setAttribute('type', 'hidden');
          leftInput.setAttribute('name', 'left');
          leftInput.setAttribute('value', stack.leftPosition);
          let topInput = document.createElement('input');
          topInput.setAttribute('type', 'hidden');
          topInput.setAttribute('name', 'top');
          topInput.setAttribute('value', stack.topPosition);
          let idInput = document.createElement('input');
          idInput.setAttribute('type', 'hidden');
          idInput.setAttribute('name', '_id');
          idInput.setAttribute('value', stack._id);
          form.appendChild(leftInput);
          form.appendChild(topInput);
          form.appendChild(idInput);
          form.style.left = stack.leftPosition;
          form.style.top = stack.topPosition;

          //Keeps the hidden input values from being added to the GET req
          //$('form > input:hidden').attr("disabled", true);

          //makes the stacks from storage droppable and 
          //brings their panels into position
          $(form).droppable({
            tolerance: "touch",
            drop: function (event, ui) {
              $(event.target).append(ui.draggable);
              let blueStack = $(this).offset();
              let panel = ui.draggable.offset();
              let left_end = blueStack.left - panel.left;
              let top_end = blueStack.top - panel.top + 2;
              ui.draggable.animate({
                top: '+=' + top_end,
                left: '+=' + left_end
              }, 0);
              let droppedPanelId = ui.draggable.data('id');
              //console.log(this)
              //console.log('The dropped panel Id is: ' + droppedPanelId);
              if (event.target.classList.contains('hasPanels')) {
                return;
              } else {
                event.target.classList += ' hasPanels';
              }
            }
          })
          well.appendChild(form);

          if (stack.panel.length === 0) {
            //if the stack has no panels
            return;
          } else {

            stack.panel.forEach((panelInStack, index) => {
              panelInStack = document.createElement('div')
              panelInStack.setAttribute('id', stack.panel[index]);
              panelInStack.setAttribute('class', 'panel');
              form.append(panelInStack);
            })
          }//end of else
        });//end of first forEach
      }//end of if for readyState and status
    };//end of xhr

    xhttp.open("GET", "http://localhost:3000/api/sector6/stacks", true);
    xhttp.send();
  });

  //deletes a stack from the sector
  document.addEventListener('click', (event) => {
    if (!event.target.classList.contains('delete')) {
      return;
    } else {
      let xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          let deletedStack = JSON.parse(xhttp.responseText);
          //console.log(deletedStack);
          location.reload();
        }
      }
      xhttp.open("DELETE", "http://localhost:3000/api/sector6/stack/" + rightClickedStack.id, true);
      xhttp.send();
    }
  });

  //displays panels in a viewer for the selected stack (view mode)
  document.addEventListener('click', (event) => {
    if (!event.target.classList.contains('view')) {
      return;
    } else {
      //clears any previous panels from the viewer
      let stackUi = document.getElementById('stack__Ui')
      while (stackUi.firstChild) {
        stackUi.removeChild(stackUi.firstChild)
      }
      let retrievedStack;
      let xhttp = new XMLHttpRequest();
      xhttp.open("GET", `http://localhost:3000/api/sector6/stack/${rightClickedStack.id}`, true);
      xhttp.setRequestHeader("Content-type", "application/json");
      xhttp.send();
      xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          retrievedStack = JSON.parse(xhttp.responseText);
          retrievedStack = retrievedStack.reverse();
          retrievedStack.filter((panel) => { return panel !== null }).forEach((panel, index) => {
            console.log(panel);
            let panelNameText = document.createTextNode(`${panel.size}${panel.tieStrips} ${panel.linerType}`);
            let panelInSlot = document.createElement('h2');
            panelInSlot.appendChild(panelNameText);
            panelInSlot.setAttribute('id', panel._id);
            console.log(panelInSlot.id);
            panelInSlot.setAttribute('class', 'retrievedPanel__slot viewMode');
            stackUi.appendChild(panelInSlot);
          })
        }
      }
    }//end of else
  });


  //displays panels in a viewer for the selected stack (edit mode)
  document.addEventListener('click', (event) => {
    if (!event.target.classList.contains('edit')) {
      return;
    } else {
      //clears any previous panels from the viewer
      let stackUi = document.getElementById('stack__Ui')
      while (stackUi.firstChild) {
        stackUi.removeChild(stackUi.firstChild)
      }
      let retrievedStack;
      let xhttp = new XMLHttpRequest();
      xhttp.open("GET", `http://localhost:3000/api/sector6/stack/${rightClickedStack.id}`, true);
      xhttp.setRequestHeader("Content-type", "application/json");
      xhttp.send();
      xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          retrievedStack = JSON.parse(xhttp.responseText);
          retrievedStack = retrievedStack.reverse();
          retrievedStack.filter((panel) => { return panel !== null }).forEach((panel, index) => {
            //console.log(panel);
            let panelNameText = document.createTextNode(`${panel.size}${panel.tieStrips} ${panel.linerType}`);
            let panelInSlot = document.createElement('h2');
            panelInSlot.appendChild(panelNameText);
            panelInSlot.setAttribute('id', panel._id);
            //console.log(panelInSlot.id);
            panelInSlot.setAttribute('class', 'retrievedPanel__slot editMode');
            stackUi.appendChild(panelInSlot);
          })
        }
      }
    }//end of else
  });

  //delete the selected panel from the stack in the edit mode viewer
  document.addEventListener('click', (event) => {
    if (!event.target.classList.contains('editMode')) {
      return;
    } else {
      //remove the panel node from the DOM
      event.target.parentNode.removeChild(event.target);

      //perform a DELETE call of the panel in the panel collection
      let xhttp1 = new XMLHttpRequest();
      xhttp1.open('DELETE', `http://localhost:3000/api/sector6/panel/${event.target.id}`, true);
      xhttp1.send();

      //Remove the panel selected in the viewer for deletion from rightClickedStack
      console.log('the panel clicked ' + event.target.id)
      let panelCollection = rightClickedStack.childNodes;
      for (let i = 0; i <= panelCollection.length - 1; i++) {
        if (panelCollection[i].id === event.target.id) {
          rightClickedStack.removeChild(rightClickedStack.childNodes[i]);
        }
      }

      //Collect the ids of the remaining childNodes of rightClickedStack 
      //that are divs (aka the panels)
      let panelArray = [];
      let panelIdArray = [];
      panelArray = [...rightClickedStack.children];
      panelArray = panelArray.filter((element) => {
        if (element.classList.contains('panel')) {
          return element;
        }
      });
      panelArray.forEach((panel) => {
        panelIdArray.push(panel.id);
      })

      //passes the ids of the panels through the req.body
      var data = {};
      data.panel = panelIdArray;
      var json = JSON.stringify(data);

      var xhttp2 = new XMLHttpRequest();
      xhttp2.open("PUT", `http://localhost:3000/api/sector6/stack/${rightClickedStack.id}`, true);
      xhttp2.setRequestHeader("Content-type", "application/json");
      xhttp2.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          //console.log(xhttp.responseText);
          let stack = JSON.parse(xhttp2.responseText);
          //console.log(stack);
        }
      };
      xhttp2.send(json);
    }
    location.reload();
  });

  // <-------------------start of Context Menu ------------------------>

  //the controller for stack context menu
  document.addEventListener('contextmenu', (e) => {
    rightClickedStack = clickInsideElement(e, stackItemClassName)
    if (rightClickedStack) {
      e.preventDefault();
      toggleMenuOn(e);
      positionMenu(e);
    } else {
      toggleMenuOff(e);
    }
  });

  function clickInsideElement(e, className) {
    let el = e.target;

    if (el.classList.contains(className)) {
      return el;
    } else {
      while (el = el.parentNode) {
        if (el.classList && el.classList.contains(className)) {
          return el
        }
      }
    }
    return false;
  }

  function toggleMenuOn(e) {
    if (menuState !== 1) {
      menuState = 1;
      menu.classList.add(activeClassName);
    }
  }

  function toggleMenuOff() {
    if (menuState !== 0) {
      menuState = 0;
      menu.classList.remove(activeClassName);
    }
  }

  //closes the stack context menu with a left click
  document.addEventListener('click', (event) => {
    let button = event.button;
    if (button === 0) {
      toggleMenuOff();
    }
  })

  //escapes the stack context menu (Esc button)
  window.addEventListener('keyup', (event) => {
    if (event.keyCode === 27) {
      toggleMenuOff();
    }
  });

  //gets the position of the right click on the document
  function getPosition(e) {
    let posx = 0;
    let posy = 0;

    if (!e) {
      let e = window.event;
    }

    if (e.pageX || e.pageY) {
      posx = e.pageX;
      posy = e.pageY;
    } else if (e.clientX || e.clientY) {
      posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
      posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
    }

    return {
      x: posx,
      y: posy
    }
  }

  //positions the stack context menu
  function positionMenu(e) {
    clickCoords = getPosition(e);
    clickCoordsX = clickCoords.x;
    clickCoordsY = clickCoords.y;

    menuWidth = menu.offsetWidth + 4;
    menuHeight = menu.offsetHeight + 4;

    windowWidth = window.innerWidth;
    windowHeight = window.innerHeight;

    if ((windowWidth - clickCoordsX) < menuWidth) {
      menu.style.left = windowWidth - menuWidth + "px";
    } else {
      menu.style.left = clickCoordsX + "px";
    }

    if ((windowHeight - clickCoordsY) < menuHeight) {
      menu.style.top = windowHeight - menuHeight + "px";
    } else {
      menu.style.top = clickCoordsY - 120 + "px";
    }
  }

  window.addEventListener('onresize', () => {
    toggleMenuOff();
  });

  //<---------------------- end of Context Menu ----------------------->
  //<----------------------end of Stacks ------------------------------>

  //<----------------------start of Panels ---------------------------->

  //resets the dataForm when it has been submitted
  //so you can enter another panel's data
  let dataForm = document.getElementById('dataForm');
  dataForm.addEventListener('submit', () => {
    setTimeout(() => {
      dataForm.reset();
    }, 100)
  })


  //pulls the panel data (id from the res) from the panelIframe and 
  //gives the panel clone its id created by the database. Only applies
  //to the FIRST CLICK since we immediately change it's id
  document.addEventListener('mousedown', (event) => {
    if (event.target.id !== 'panelIconClone') {
      return;
    } else {
      let data = document.getElementById('panelIframe').contentDocument.documentElement.textContent
      data = JSON.parse(data);
      event.target.id = data._id;

      //add a class here panelIdentified to event.target
      event.target.classList += ' panelIdentified'

      //change the position property of the element
      event.target.position = "absolute";
      event.target.top = '2px';
      event.target.left = '0px';

      //makes .panelIdentified draggable and sends the id of the panel
      //to the stack it is dropped on
      $('.panelIdentified').draggable({
        start: function (event) {
          let id = event.target.id;
          $(event.target).data('id', id)
        }
      })
      //console.log(event.target);
    }
  })

  //saving the stack and updating its state
  document.addEventListener('click', (event) => {
    if (!event.target.classList.contains('hasPanels')) {
      return;
    } else {
      let panelArray = [];
      let panelIdArray = [];
      panelArray = [...event.target.children];
      panelArray = panelArray.filter((element) => {
        if (element.classList.contains('panel')) {
          return element;
        }
      });
      panelArray.forEach((panel) => {
        panelIdArray.push(panel.id);
      })

      //passes the ids of the panels through the req.body
      var data = {};
      data.panel = panelIdArray;
      var json = JSON.stringify(data);

      var xhttp = new XMLHttpRequest();
      xhttp.open("PUT", `http://localhost:3000/api/sector6/stack/${event.target.id}`, true);
      xhttp.setRequestHeader("Content-type", "application/json");
      xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          //console.log(xhttp.responseText);
          let stack = JSON.parse(xhttp.responseText);
          //console.log(stack);
        }
      };
      xhttp.send(json);
    }
  });


  //Query the sector for a panel
  document.querySelector('#control-panel__btn__2').addEventListener('click', () => {
    let sizePrompt = prompt("Enter the panel size: ");
    let tieStripsPrompt = prompt("Enter the number of tie strips: ");
    let linerTypePrompt = prompt("Enter the liner type");

    let xhttp = new XMLHttpRequest();
    xhttp.open('GET', `http://localhost:3000/api/sector6/panels`, true);
    xhttp.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200) {
        let currentPanels = JSON.parse(xhttp.responseText);
        userDataStr = sizePrompt.toUpperCase() + tieStripsPrompt + ' ' + linerTypePrompt.toUpperCase();
        for (let i = 0; i <= currentPanels.length - 1; i++) {
          let panelDataStr = currentPanels[i].size.toUpperCase() + currentPanels[i].tieStrips + ' ' + currentPanels[i].linerType.toUpperCase();
          if (userDataStr === panelDataStr) {
            let queriedPanel = document.getElementById(currentPanels[i]._id);
            queriedPanel.parentElement.classList.add('hasQueriedPanel');
          }
        }
      }
    }
    xhttp.send();
  });



  let yard = document.getElementById('link__0');
  let sector1 = document.getElementById('link__1');
  let sector2 = document.getElementById('link__2');
  let sector3 = document.getElementById('link__3');
  let sector4 = document.getElementById('link__4');
  let sector5 = document.getElementById('link__5');
  let sector6 = document.getElementById('link__6');
  let sector7 = document.getElementById('link__7');
  let sector8 = document.getElementById('link__8');
  let sector9 = document.getElementById('link__9');
  let sector10 = document.getElementById('link__10');
  let sector11 = document.getElementById('link__11');
  let sector12 = document.getElementById('link__12');
  let sector13 = document.getElementById('link__13');
  let sector14 = document.getElementById('link__14');
  let sector15 = document.getElementById('link__15');


  yard.addEventListener('click', () => {
    window.location.href = "http://localhost:3000"
  });
  sector1.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector1View"
  });

  sector2.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector2View"
  });

  sector3.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector3View"
  });

  sector4.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector4View"
  });

  sector5.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector5View"
  });

  sector6.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector6View"
  });

  sector7.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector7View"
  });

  sector8.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector8View"
  });

  sector9.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector9View"
  });

  sector10.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector10View"
  });

  sector11.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector11View"
  });

  sector12.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector12View"
  });

  sector13.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector13View"
  });

  sector14.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector14View"
  });

  sector15.addEventListener('click', () => {
    window.location.href = "http://localhost:3000/api/sector15View"
  });


  //<----------------------end of Panels ------------------------------>
</script>