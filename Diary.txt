Started Pacheco App 4/11/2020

To start the server:
nodemon app.js

1. YouTube tutorial (8 videos):
This covers drap and drop
https://www.youtube.com/watch?v=Fb-N_1b7BEE&list=PL_GGiAMracOVlsjmuRXIrhaZ3JmVkqMwY&index=3

2. Traversy Udemy MERN tutorial
https://www.udemy.com/course/mern-stack-front-to-back/learn/lecture/10054652#content

Duplicate Html Elements Using jQuery
https://www.tutsmake.com/how-to-duplicate-html-elements-using-jquery-clone/

jQuery: remove original space of draggable while dragging?
https://stackoverflow.com/questions/22408500/jquery-remove-original-space-of-draggable-while-dragging

JQuery how to append on the same place
https://stackoverflow.com/questions/53944121/jquery-how-to-append-on-the-same-place

Google Search:
save the state of dragged elements jquery

Save position of draggable div jQuery
https://stackoverflow.com/questions/14885669/save-position-of-draggable-div-jquery
https://stackoverflow.com/questions/32789473/set-position-of-a-div-from-data-saved-in-localstorage/32789607

//---------------------------------------------------------------------------

4/12/2020

Started Traversy MERN again to glean information
-started moongoose schemas
-differentiated models from lib
  -models holds mongoose schemas
  -lib hold CS concept files (stack, linked list)
  -set up routes that Postman can retrieve res from(simple strings)

I want the Icons to open forms when I click on them. That way when 
they are clicked, they start the interaction with the Node server. We will fill out
the form, then submit the Form. Then the user can drag the item to it's position
on the map.

Since the Icons create Form controls, I don't want to clone them, 
I want to clone items that look like them, but are still divs. 

Clone those and attach them to the Well.

//------------------------------------------------------------------------

4/15/2020

I want to do something like this to connect the stack icon click event with
form generation:

<a href="#" id="someLink">link</a>
$('#someLink').click(function(){
    popup('/map/', 300, 300, 'map'); 
    return false;
});

Not the meaning of the code, but the use of jQuery, .click, the anonymous function, 
etc...

This article has lots of good ideas about addEventListener vs. onclick()
https://stackoverflow.com/questions/5871640/why-is-using-onclick-in-html-a-bad-practice

Make an SPA using Express, jQuery, and Handlebars:
https://tutorialzine.com/2015/02/single-page-app-without-a-framework

on click of div send a post request to node
https://stackoverflow.com/questions/35509396/post-method-to-url-from-a-onclick-function

//-------------------------------------------------------------------------------------------

4/16/2020

It seems as though I should turn the "icon" divs into buttons. Then it will be easier to use
them with the forms I want to associate them with... possibly. 


This is the todo list I created. Some of it was done, some should not be done because it won't
work. Either way here it is:

Process - https://www.pair.com/support/kb/how-to-use-jquery-to-show-hide-a-form-on-click/
+1. Turn the icon divs into buttons	
+2. For each of the buttons, add assign an id to the buttons
+3. Create the model for each of the icon elements
3. Create an HTML form for each type of icon button
4. Set each form to display:none using the form's id in the .css file
5. Set up the jQuery for Toggle
7. Position the form using CSS so that it appears in an unobtrusive location on the screen
		

    $(function() {
        $("#panelIcon").click(function() {
          $("#panelForm").toggle();
        })
      })

	#panelForm {

	}

  //-------------------------------------------------------------------------------------------

4/19/2020

Quick Sketch of possible development directions:
1. I need to send data from the form through to the database without refreshing the page
2. I need to determine how to save the data for each of the forms as a stack
3. I need to determine if I should just use the one form, or should each
   product type have it's own form to toggle visible

//Outcome:
I created a page for practicing connecting to the database:
http://localhost:3000/api/add-panels

//------------------------------------------------------------------------------------------

4/20/2020

Goal: Click a panel

Click a panel:
-opens a form
-we populate the form
-we send the form to the server
-the server sends the data to the MongoDB database

Questions:
-Does Node know if the data was properly stored? (callback?)
-How do I call a form in jQuery?
  -is it jQuery or just JS
-Can I add right-click delete to my nodes?
-How do I use Mongoose schema/models?

//------------------------------------------------------------------------------------------

4/21/2020

Goal: to get the stack built for the panels, so I can store a stack of data

To create a stackable panel, I need to have saved the data about the panel. But where?
1. In the stack object itself. 
2. In the database.

But I just realized something about the application with that thought, and it is this:
  "The state of the database is not equal to the state of the application"

1. I realized I was once again in the world of managing state in JS
2. That the state of the application is a completely seperate thing than the state of the database
   although the two are closely linked.

The Pacheco application has state, in the form of information about the panels that have been entered.
This information has to pass from the UI of the device using the application. This will most certainly 
be through a browser. Therefore, there will be a time when the only store of the data is on the client.
I will have to gather this information, turn it into one object if possible, the state of the app, and
then send this information into storage. 

The code for Stack generation must include count of the objects in the stack, along with the data
entered into the form

I realized that I needed to understand more about the moment after the form is submitted
and the page refreshes. What survives a page refresh in an application?

https://stackoverflow.com/questions/12181277/how-can-i-run-some-javascript-after-a-form-submit-event
https://stackoverflow.com/questions/16206322/how-to-get-js-variable-to-retain-value-after-page-refresh

I like this answer, because it will show the user if the information was saved to the database or not
Basically it requires it! (I think)
-1st time I paste this article
https://stackoverflow.com/questions/20439871/how-to-save-form-record-in-client-side-while-saving-data-with-ajax-post


The state that is gathered and sent to the database is the same state that
will be saved when the user quits the application(by closing the browser), and the same state that 
will be called from the server to populate the UI when the user restarts the 
application by calling the server again (this all runs in a browser, remember?)

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Remember, this is a Express application, not a jQuery application. No such thing as a 
jQuery application. jQuery is nothing but a JS library. The entire application depends on
Node/Express.


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

So for the next session, I need to seperate the toggle of the form visibility and the panel creation( in the UI)
Visibility is just visibility. 

I need to attach the creation of the panel to the successful return of the request to create the panel:
-2nd time I pasted this article in the same day:
https://stackoverflow.com/questions/20439871/how-to-save-form-record-in-client-side-while-saving-data-with-ajax-post
Basically when this happens I also create the panel in the Well

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Use this article to place CRUD in the application to the database
https://alligator.io/nodejs/crud-operations-mongoose-mongodb-atlas/

We will work on attaching the form later

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Add the position of the object to the Schemas. This will be how we send the 
position of the object in the window to the database for later retrieval, when
the user returns to the submitted

Refreshing the browser should call the most recent saved state from the database.


By the very act of presenting the application after refreshing the page, you
are sending over code that will instantiate JS objects with state. Remember, this
is a browser-based application. The initial state is not local by design. Once it is 
sent to the browser, it is like a thin sheet of information that can be manipulated
and then sent back to update the database.

This is where MVC comes in. 

Express is the Controller
The Mongoose schema, and the JS modules are the Model
Handlebars creates the View

Send the stack to the database first.
Figure out the stack, then figure out the Panels/Corners and their forms

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Google Search "local modules"
https://www.tutorialsteacher.com/nodejs/nodejs-local-modules

This is what you were looking for when asking about how, when, and where 
to run your own code in your node application. Also, as far as sending over
JS code, to run in the browser...

...that is what you are already doing by using the <script> tag and jQuery.
So yes, you can send over code that affects the state of the client.

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


4/22/2020

The data will be modeled using MongoDB schemas. 

Mongoose looks like using SQL in Javascript, if that makes any sense. It has it's own syntax.
I thought to myself, "It's like a new Rubik's Cube to hold..."

Think about the difference between Schemas and Node Local modules
https://www.tutorialsteacher.com/nodejs/nodejs-local-modules

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Created CRUD operations for the Stack. Had to modify the stacks.js file api calls
Learned about Mongoose and how it can be used, it's methods, and it's syntax.
Used Postman to test the api calls. Saved the GET, POST, PATCH, AND DELETE method calls

//----------------------------------------------------------------------------------

4/23/2020

Found out how to reference another schema in my Mongoose schema. 
It's called using Population

https://stackoverflow.com/questions/29078753/how-to-reference-another-schema-in-my-mongoose-schema

Things to do:
1. Study the Mongoose documentation
2. Study the Express documentation
3. Study the Node documentation

*********Learn how to Populate the sector schema with stack schemas*********

Realized what I was thinking about all day was actually missing a key point:
"How is the data returned?" In other words, I didn't think about it's format
which is JSON. This is what will allow me to move from the database and the server
to POJOs and the DOM. JSON is the bridge.

My question to myself throughout the day, actually turned into a intelligible sentence:
"What do I do with the JSON data that is returned by my GET request?"
"How do I use it to populate my HTML?"

https://stackoverflow.com/questions/8314712/how-do-i-dynamically-populate-html-elements-with-json-data-with-javascript-not-j

One of the solutions:

$(document).ready(function () {
    loadfunctionAjax();
});
var loadfunctionAjax = function () {
    $.ajax({
        type: 'GET',
        url: '/Site/SocialLink',
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var HTML = '';
            for (var i = 0; i < data.length; i++) {
                item = data[i];
                HTML += '<li><a class="" target="_blank" href="' + item.FALink + '"><i class="fa ' + item.FAIcon + '"></i>' + item.Name + '</a ></li > ';
            }
            $('#footerSocialNav').append(HTML);
        }
    });
}

If the location of the Stack objects were one of these propeties, then each time I load the current state of the database into the application, I would
probably be able to position the stacks correctly. Something like that. 


//-------------------------------------------------------------------------------------

4/24/2020

From the Mongoose Documentation:

With ES6 Classes
Schemas have a loadClass() method that you can use to create a Mongoose schema from an ES6 class:

ES6 class methods become Mongoose methods
ES6 class statics become Mongoose statics
ES6 getters and setters become Mongoose virtuals
Here's an example of using loadClass() to create a schema from an ES6 class:

class MyClass {
  myMethod() { return 42; }
  static myStatic() { return 42; }
  get myVirtual() { return 42; }
}

const schema = new mongoose.Schema();
schema.loadClass(MyClass);

console.log(schema.methods); // { myMethod: [Function: myMethod] }
console.log(schema.statics); // { myStatic: [Function: myStatic] }
console.log(schema.virtuals); // { myVirtual: VirtualType { ... } }


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

option: toObject
Documents have a toObject method which converts the mongoose document into a plain JavaScript object. This method accepts a few options.
Instead of applying these options on a per-document basis, we may declare the options at the schema level 
and have them applied to all of the schema's documents by default.

To have all virtuals show up in your console.log output, set the toObject option to { getters: true }:

var schema = new Schema({ name: String });
schema.path('name').get(function (v) {
  return v + ' is my name';
});
schema.set('toObject', { getters: true });
var M = mongoose.model('Person', schema);
var m = new M({ name: 'Max Headroom' });
console.log(m); // { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom is my name' }
To see all available toObject options, read this.

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Subdocuments answers the question of how to create Stacks that hold Panels in Mongoose
https://mongoosejs.com/docs/subdocs.html

The answer to the problem of nested Schemas(how to do it!)

youtube.com/watch?v=gFnRo29MxtY

//--------------------------------------------------------------------------

4/25/2020

So really I am putting the cart before the horse. 

I need to create the Sector Schema first. In fact I need to:
1. create the structure of the data as JSON. 
  -the structure of this json data will be of a Sector having nested schemas
    -the nested Schemas include:
      -Stacks
      -Panels
      -Corners
2. create Sector Schema with the appropriately nested Schemas
  -the Sector schema will still be using the Linked List data structure
  -the Sector schemas will also have corners, panels, and stacks as part 
   of it's structure
3. modify the Stack class to have nested Panel schemas
4. set up Postman for the Sector model
5. check if I should use the array type, single type, or both, for the Schemas
6. Learn how to pass data back to Express request
7. learn how to use the body of the request object to populate the HTML/DOM
8. use jQuery to manipulate the created objects and handle Ajax

To move the application forward, you need to figure out how to load Sectors
to the database, complete with nested Stack, Panel, and Corner data

Its going to be the same thing you have to do with the tables in the Restaurant App

Tables === Stacks in the UI
Sections === Sectors

You have to create the relationships between the Collections in the app, just
like you create the relationships between SQL tables. You will also have to
write your queries just like SQL, and call the queries using the API calls 

This is not a SPA, or a jQuery app.
This is an Express app using Mongoose and MongoDB

Actually the above list isn't correct. The Sectors have to exist inside a Schema too.

The plan was always to switch between the Sectors in the yard to present grouped 
data. 

I created a Yard.js Model file and a yard.js api file. 

The Yard Schema is what I need to create. The Yard will hold Sectors, which
holds Stacks, which holds Panels. The Sectors will also hold Corners.

The Yard may also hold the Well object in the UI, and the Scrap Panel object
for the UI, and the Loading Zone, sections I was thinking of including in the
UI and being able to pull data from to send to the database. 



$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

How to select a nested document to update using nested Schemas
https://stackoverflow.com/questions/18001478/referencing-another-schema-in-mongoose


//--------------------------------------------------------------------------

4/26/2020

//The Stack missing the panel data
    
{
        "_id": "5ea59d7294c00b12c463f846",
        "top": 2,
        "id": "8789833",
        "count": 3,
        "__v": 0
    }

The first panel in the collection

   {
        "_id": "5ea2462bbc0c2403429d8842",
        "size": "A",
        "tieStrips": 9,
        "linerType": "1D",
        "dowels": false,
        "bigTies": false,
        "wall": "W1",
        "__v": 0
    },



What I sent to PATCH in Postman

  {
        "_id": "5ea1277178c89b16df509ec8",
       
		"panel": {
        "_id": "5ea2462bbc0c2403429d8842"
    },
        "top": 3,
        "id": "463984",
        "count": 2,
        "__v": 0
    }

The change that occurred:
 {
        "_id": "5ea1277178c89b16df509ec8",
        "dataStore": [
            "[panel, F2]"
        ],
        "top": 3,
        "id": "463984",
        "count": 2,
        "__v": 0,
        "panel": "5ea2462bbc0c2403429d8842"
    },

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


Right now each stack can hold one panel. I need them to hold an array of panels
which sounds like an array of ObjectId

Would this work?
panels: [mongoose.Schema.Types.ObjectId]

Or this?
panels: {
  type: [mongoose.Schema.Types.ObjectId],
  ref: 'Panel'
}

//-------------------------------------------------------------------

4/30/2020

I think I need to use the populate method
I also think I need to start the MongoDB Udemy course

//-------------------------------------------------------------------

5/2/2020

Started Max Udemy tutorial. Covered Sections 1 to 3. 

Here is how you query the database and merge data from two collections.
MongoDB, not mongoose:
db.books.aggregate([{$lookup: {}}])

Here is how you create collections explicitly:

> db.createCollection("posts", {
...   validator: {
...     $jsonSchema: {
...       bsonType: "object",
...       required: ['title', 'text', 'creator','comments'],
...       properties: {
...         title: {
...           bsonType: "string",
...           description: "must be a string and is required"
...         },
...         text: {
...           bsonType: "string",
...           description: "must be a string and is required",
...         },
...         creator: {
...           bsonType: "objectId",
...           description: "must be a objectId and is required",
...         },
...         comments: {
...           bsonType: "array",
...           description: "must be an array and is required",
...           items: {
...             bsonType: "object",
...             required: ["text", "author"],
...             properties: {
...               text: {
...                 bsonType: "string",
...                 description: "must be a string and is required",
...               },
...               author: {
...                 bsonType: "objectId",
...                 description: "must be a objectId and is required",
...               }
...             }
...           }
...         }
...       }
...     }
...   }
... });

//Here is a sample post for the collection we just created:
> db.posts.insertOne({title: "My First Post", text: "This is my first post, I hope you like it!", tags: ["new","tech"], creator: ObjectId("5eadaf3c1d77927600962463"), comments:[{text: "I like this post!", author: ObjectId("5eadaf3c1d77927600962462")}]})

//Here is the result of calling that post using .findOne()
> db.posts.findOne()
{
        "_id" : ObjectId("5eadb8811d77927600962467"),
        "title" : "My First Post",
        "text" : "This is my first post, I hope you like it!",
        "tags" : [
                "new",
                "tech"
        ],
        "creator" : ObjectId("5eadaf3c1d77927600962463"),
        "comments" : [
                {
                        "text" : "I like this post!",
                        "author" : ObjectId("5eadaf3c1d77927600962462")
                }
        ]
}

------------------------------------------------------------------------------------------------------------------
5/16/2020

Took a break to catch up on LaunchSchool assignments. Back after two weeks

Also restarted the Max MongoDB tutorial, this time taking detailed notes

LaunchSchool helped, I learned about yaml and configuration files. Should be useful at some point.

So once I have my database loaded with my data, I need to do something like this maybe?
https://stackoverflow.com/questions/50793605/how-to-add-json-data-to-the-card-and-display-to-the-end-user
-this is a very loose interpretation btw, first search result that I found

Basically I need to parse the json configuration data that I receive from the database and load 
the appropriate HTML elements


Creating Databases and Collections for Atlas Clusters
https://intercom.help/mongodb-atlas/en/articles/3013643-creating-databases-and-collections-for-atlas-clusters

//----------------------------------------------------------------------------------------------------------------------

5/17/2020

Total time to :
1. model data 
2. set up model in MongoDB: 
3. create APIs for the CRUD calls

==> 4/11/20 to 5/17/2020 (36 days).

Gives me an actual verbal solution to how much time it will take me to set up an API. This does 
not include the time spent devising the mental model. Add two weeks. 

Q. Total time it takes me to set up an API? 
A. 50 days

Now I have a measurable answer.

------------------------------------------------------------------------------------------------------

Successfully set up the Pacheco App API. The API information for CRUD calls have been set up, and
a user can view the GET responses in the browser as JSON data. The JSON is returned from Express
and is retrieved from a MongoDB server. 

Started reviewing the Diary.txt file for next steps to take with setting up the application. 

-------------------------------------------------------------------------------------------------------------------

Next steps:

How to start at jQuery on the front-end and pass data back to MongoDB through Express/Node
https://stackoverflow.com/questions/17662829/how-to-use-jquery-to-pass-object-data-to-node-server-and-save-to-mongodb

How to use XHR and jQuery to query data from a server and render the data in an HTML table
https://stackoverflow.com/questions/19901843/display-json-data-in-html-table

How to perform form submit without resetting the DOM
https://stackoverflow.com/questions/18169933/submit-form-without-reloading-page

Read all the documentation for the stack parts:
https://nodejs.org/en/docs/guides/
https://expressjs.com/en/guide/routing.html
http://mongodb.github.io/node-mongodb-native/3.5/api/
https://docs.mongodb.com/drivers/node
https://mongoosejs.com/docs/
https://jquery.com/
https://jqueryui.com/
https://handlebarsjs.com/guide/#evaluation-context

Call the API using jQuery:
https://hackersandslackers.com/making-ajax-calls-with-jquery/


----------------------------------------------------------------------------------------------------------

Pacheco App API can now interact intelligently with any other API that exists. Think about the possibilities.

----------------------------------------------------------------------------------------------------------

Call the API using jQuery:
https://hackersandslackers.com/making-ajax-calls-with-jquery/

//--------------------------------------------------------------------------------------------------------------------

5/18/2020

Store JSON in HTML
https://stackoverflow.com/questions/7322682/best-way-to-store-json-in-an-html-attribute

Placed XMLHttpRequest object in home.handlebars. It pulled in the JSON data to the console as requested.

//-----------------------------------------------------------------------------------------------------------------------------------------

5/22/2020

Using JSON.parse(xhttp.responseText)

-----------------------------------------------------------------------------------------------
Found this code:
https://stackoverflow.com/questions/30464675/create-table-from-json-pure-javascript

var children = [{num: 6, name: 'me', phone: 7}, {num: 8, name: 'him', phone: 9}];

function addHeaders(table, keys) {
  var row = table.insertRow();
  for( var i = 0; i < keys.length; i++ ) {
    var cell = row.insertCell();
    cell.appendChild(document.createTextNode(keys[i]));
  }
}

var table = document.createElement('table');
for( var i = 0; i < children.length; i++ ) {

  var child = children[i];
  if(i === 0 ) {
    addHeaders(table, Object.keys(child));
  }
  var row = table.insertRow();
  Object.keys(child).forEach(function(k) {
    console.log(k);
    var cell = row.insertCell();
    cell.appendChild(document.createTextNode(child[k]));
  })
}

document.getElementById('container').appendChild(table);
<div id="container"></div>

Will use it to create a table from the JSON data I pulled over from the API

Currently pulling over the JSON to each appropriate page of the application


-------------------------------------------------------------------------------------------------------

5/23/2020

Render the panels in a table. Some of the calls return nested data. I need to figure
out how to render the nested tables

https://stackoverflow.com/questions/47915321/turn-nested-json-data-into-html-table

Beginning to convert the Pacheco App to React. Using Maximillian tutorial
as the guide.
https://www.udemy.com/course/react-the-complete-guide-incl-redux/learn/lecture/8268490#overview

---------------------------------------------------------------------------

5/24/2020

Implement drag and drop between stacks as a query from the UI
-drag one panel in on stack onto another stack
  -write the call to the database that would async perform
   that action. Return the results to the screen
  -in seems in React the state would update automatically
  -the icon would move in the view by touch

6/13/2020

Learned that each of the View files needs to have its own link
to the style.css file like so:
<link rel="stylesheet" href="/style.css"></style>

I added an id selector to the style.css file for 
this element in panelDisplay.handlebars
<div id="displayPanelContainer"></div>

The code adds flex to the css styling for the page

//-------------------------------------------------------------------------

Solution to the Drag and Drop JavaScript problem (uses jQuery too!)

https://stackoverflow.com/questions/16632657/save-draggable-div-position

Google search: drag and drop javascript save position

---------------------------------------------------------------------------------------------

6/24/2020

Deploying Pacheco App to Heroku using this tutorial:
https://www.freecodecamp.org/news/how-to-deploy-your-site-using-express-and-heroku/

Led me here:
https://devcenter.heroku.com/articles/getting-started-with-nodejs

and here:
https://devcenter.heroku.com/articles/heroku-cli#download-and-install

and here:
https://devcenter.heroku.com/articles/preparing-a-codebase-for-heroku-deployment

here too:
https://devcenter.heroku.com/articles/git#creating-a-heroku-remote



There are bugs to fix:
1. I am getting a CORS error because panelView is trying to use the localhost for data instead of the 
    node server connected to mongodb
2. The jQuery does not check for touch with drag and drop, only mouse clicks

jQuery plugins for drag and drop for mobile:
https://www.omegaweb.com/10-jquery-drag-and-drop-plugins-for-mobile/


Best video so far on Heroku and Express/Node:
https://www.youtube.com/watch?v=w0HAZKxyrf8
Explains how to use routes in Heroku app so I can see the entire web application's pages

Learned that Heroku is for hosting applications, not websites

Pacheco app url:
https://shielded-forest-73830.herokuapp.com/

-----------------------------------------------------------------------------------------------------------

Searched Google: spa vanilla js heroku
Found this: 
https://gist.github.com/hone/24b06869b4c1eca701f9

HTML5 Push State
Push State is used to manipulate the browser history, allowing rich JavaScript applications to ensure URLs continue to be useful. If you try to go to a page that isn't the index, but actually exists:

$ curl -I https://sharp-rain-871.herokuapp.com/conferences/
HTTP/1.1 404 Not Found
Connection: keep-alive
Server: nginx
Date: Wed, 10 Feb 2016 06:56:17 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 162
Via: 1.1 vegur
This can be fixed, but using a custom route. In your static.json, you can add a custom route that redirects all routes to the index.html.

{
  "root": "public",
  "clean_urls": false,
  "routes": {
    "/**": "index.html"
  }
}
With these changes, you can deploy them onto Heroku to have them take effect.

$ curl -I https://sharp-rain-871.herokuapp.com/conferences/
HTTP/1.1 200 OK
Connection: keep-alive
Server: nginx
Date: Wed, 10 Feb 2016 07:08:59 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 699
Last-Modified: Wed, 10 Feb 2016 06:41:29 GMT
Vary: Accept-Encoding
Etag: "56badb99-2bb"
Accept-Ranges: bytes
Via: 1.1 vegur
As can be seen, this is the exact same as the index route:

$ curl -I https://sharp-rain-871.herokuapp.com/
HTTP/1.1 200 OK
Connection: keep-alive
Server: nginx
Date: Wed, 10 Feb 2016 07:09:38 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 699
Last-Modified: Wed, 10 Feb 2016 06:41:29 GMT
Vary: Accept-Encoding
Etag: "56badb99-2bb"
Accept-Ranges: bytes
Via: 1.1 vegur

-----------------------------------------------------------------------------------------

6/27/2020

Use this instead of jQuery:

https://shopify.github.io/draggable/

--------------------------------------------------------------------

8/24/2020

Pacheco App should be mulit-page in it's first interaction.
This is the fastest, easiest way to complete the idea and present
it to them.

Also making it multi-page is the fastest way to get it in my 
portfolio. 

Ironically it will also look really good to have a full stack
?/Express/Node/MongoDB application. 

********************************************************************

Set position of a <div> from data saved in localStorage
https://stackoverflow.com/questions/32789473/set-position-of-a-div-from-data-saved-in-localstorage/32789607

*********************************************************************

Gather all the CSS properties of a Dom Element (including it's position)

https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle
The Window.getComputedStyle() method returns an object containing the 
values of all CSS properties of an element, after applying active 
stylesheets and resolving any basic computation those values may 
contain. Individual CSS property values are accessed through APIs provided 
by the object, or by indexing with CSS property names.

Syntax:
var style = window.getComputedStyle(element [, pseudoElt]);


-----------------------------------------------------------------------

9/9/2020

Get the position of a div
https://stackoverflow.com/questions/288699/get-the-position-of-a-div-span-tag

index.html<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <ul>
      <li class="special">apple</li>
      <li class="special">pear</li>
      <li class="special">tomato</li>
      <li class="special">apple</li>
      <li class="special">orange</li>
      <li class="special">banana</li>
      <li class="special">pear</li>
      <li class="special">tomato</li>
    </ul>
    <script src="index.js"></script>
  </body>
</html>



index.js

let listItems = document.getElementsByClassName("special");
let listItemsArray = [...listItems];

listItemsArray.forEach((item) => {
  let card = document.createElement("div");
  card.style.display = "inline-block";
  card.style.height = "100px";
  card.style.width = "100px";
  card.style.border = "#333 solid 2px";
  card.style.color = "fff";
  card.style.margin = "10px";
  card.style.padding = "10px";
  card.style.textAlign = "center";
  card.style.lineHeight = "100px";
  card.style.fontSize = "25px";

  card.innerHTML = item.textContent;
  document.body.appendChild(card);
  console.log(card.getBoundingClientRect());
});

let ul = document.querySelector("ul");
ul.style.display = "none";
ul.style.visibility = "hidden";

console.log(window.document.body.children);

-------------------------------------------------------------------------------------------------------------

9/26/2020

Google Maps view of Pacheco's yard. Use it to make the UI
https://www.google.com/maps/place/4801+E+60th+Ave,+Commerce+City,+CO+80022/@39.8068325,-104.9340178,118m/data=!3m1!1e3!4m5!3m4!1s0x876c7a1f5726e905:0xc67f67a2f871ff2!8m2!3d39.8059161!4d-104.9334264

10/2/2020
Attempting test run 

Stack
1. Add droppable to the jQuery method chains
2. Drop the object and get it's position
3. Use input type="hidden" to store the position data
4. Add the position to the req.body.* or req.params
5. Send the POST 


1. Turn the icon buttons into forms
2. Give the forms a class that will connect it to an eventHandler
3. Put an XHR inside the eventHandler function for ondrop
4. Append the stack node to this element when you drop the stack:

document.body.childNodes[5].children[1].lastElementChild

5. Get the position of the stack and store the position in the 
  hidden input element
6. ondrop make the POST call, sending back the stack's
   position in the req

--------------------------------------------------------------------

Made column2 droppable

Good droppable tutorial:
https://www.youtube.com/watch?v=-JFkAaLOou8

-----------------------------------------------------------------------


I need to remove the clones from the well and attach them to the column2

https://www.elated.com/jquery-removing-replacing-moving-elements/

The same author as above has a good drag and drop essential guide:
https://www.elated.com/drag-and-drop-with-jquery-your-essential-guide/


--------------------------------------------------------------------
Later steps:

Remove the send button on the panel form.
Require the data be filled
Send the panel once the panel has been dropped
Refresh the page and load the updated screen

----------------------------------------------------------------------

10/3/2020

Modified the code to append the stackicons to column2 on drop
Each stackicon clone now has a unique id

I think this is the answer to saving the position of the forms
and sending them over to the database:

https://stackoverflow.com/questions/5304276/how-do-i-save-the-position-of-draggable-resizeable-elements

This may be an alternative:

https://stackoverflow.com/questions/38130297/forcing-a-change-in-the-value-of-the-hidden-field-before-submitting-a-form


-------------------------------------------------

https://api.jquery.com/offset/

.offset()
The .offset() method allows us to retrieve the current position
of an element (specifically its border box, which excludes margins)
relative to the document.

.position()
Retrieves the current position relative to the offset parent

------------------------------------------------------------------------------------------

Added a click event to the Well
-if you click on the well you can see an HTMLCollection of the elements in the console


Submit a form without page refresh:
https://stackoverflow.com/questions/23507608/form-submission-without-page-refresh

---------------------------------------------------------------------

So the next step is to save the stackArray of the sector

----------------------------------------------------------------------

10/4/2020

How to target elements for event listeners
https://gomakethings.com/checking-event-target-selectors-with-event-bubbling-in-vanilla-javascript/

This is what is going to happen when you submit the a stack form:

router.post('/api/stack', async (req, res) => {
  const stack = new StackModel(req.body);
  try {
    await stack.save();
    res.send(stack);
  } catch {
    res.status(500).send('Stack not saved');
    console.log(err);
  }
});

-------------------------------------------------

AJAX Crash Course -- Traversy
Focuses on XHR usage
https://www.youtube.com/watch?v=82hnvUYY6QA

How I accessed the req.body when NOTHING was showing up in the route
https://stackoverflow.com/questions/42841956/accessing-req-body-values-in-express

Make the forms submit asynchronously:
https://pqina.nl/blog/async-form-posts-with-a-couple-lines-of-vanilla-javascript/

---------------------------------------------------------------------------------------------------

10/6/2020

Trying to submit the forms asynchronously. I found a hack which was to add an iframe and 
send the information to it. You just need to make the iframe display nothing

But...

I would like to do it like this...
https://stackoverflow.com/questions/13910699/how-to-prevent-the-page-redirect-but-still-submit-the-form

<form action="http://example.com/test.php" method="post">
<input type="text" name="name" />
<input type="text" name="email" />
<input type="text" name="phone" />
<textarea name="message"></textarea>
<input type="submit" class="submit" onclick="formSubmit(event)" />
</form>

function formSubmit(e){

         e.preventDefault(); //This will prevent the default click action.

        // Create DataString
        var dataString = '&name=' + $('input[name=name]').val() +
                         '&email=' + $('input[name=email]').val() +
                         '&phone=' + $('input[name=phone]').val() +
                         '&message=' + $('textarea[name=message]').val() +

        $.ajax({
            type: "POST",
            url: "http://example.com/test.php",
            data: dataString,
            success: function() {
                alert('Form Successfully Submitted');
            },  
            error: function() {
                alert('There was an error submitting the form');
            }   
        }); 
        return false; // Returning false will stop page from reloading.
    }   
}

*******************************************************************************

or this ...

https://stackoverflow.com/questions/24193102/node-js-express-making-post-request-without-redirecting-from-current-page

$(function() {
    $('#newEntryForm').submit(function(event) {
        event.preventDefault(); // Stops browser from navigating away from page
        var data;
        // build a json object or do something with the form, store in data
        $.post('/addEntry', data, function(resp) {
            alert(resp);
            // do something when it was successful
        });
    });
});


*****************************************************************************

Every time the sector page loads, it should perform a query of the database
and retrieve the most up-to-date data

Therefore, my get request for the stacks will use the onload event listener

https://www.w3schools.com/jsref/event_onload.asp
The event listener uses different syntax between HTML and JS

In HTML:

<element onload="myScript">

In JavaScript:

object.onload = function(){myScript};

In JavaScript, using the addEventListener() method:

object.addEventListener("load", myScript);

**********************************************************************

...additional options

https://stackoverflow.com/questions/4144768/javascript-ajax-call-on-page-onload

This is really easy using a JavaScript library, e.g. using jQuery you could write:

$(document).ready(function(){
$.ajax({ url: "database/update.html",
        context: document.body,
        success: function(){
           alert("done");
        }});
});
Without jQuery, the simplest version might be as follows, but it does not account for browser differences or error handling:

<html>
  <body onload="updateDB();">
  </body>
  <script language="javascript">
    function updateDB() {
      var xhr = new XMLHttpRequest();
      xhr.open("POST", "database/update.html", true);
      xhr.send(null);
      /* ignore result */
    }
  </script>
</html>


--------------------------------------------------------------------------------------------------

10/7/2020

For rendering the view with the data from the database, I started
using PEDAS. This led me to ask: For the -output, what would I really
be returning? It must be a primitive or an object.

https://expressjs.com/en/api.html#res.render

res.render(view [, locals] [, callback])
Renders a view and sends the rendered HTML string to the client. 

Optional parameters:
-locals 
  an object whose properties define local variables for the view
-callback
  a callback function

The view argument is a string that is the file path of the 
view file to render. 

Is this the correct solution?

*********************************************************************
http://www.jimlynchcodes.com/blog/how-kill-running-nodejs-processes-in-windows
Kill all running node processes in the Windows cmd prompt:

taskkill /im node.exe /F

------------------------------------------------------------------------

10/8/2020

Will be using a context menu to add functionality to the stacks once they
are created and locked in place. Would like to add delete first:

https://www.sitepoint.com/building-custom-right-click-context-menu-javascript/
https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
https://api.jquery.com/contextmenu/

************************************************************

Also for the draggable problem:
https://stackoverflow.com/questions/18789354/how-do-i-make-dynamically-created-elements-draggable

$("#Parent").on("DOMNodeInserted", ".ChildClass", function() { $(this).draggable(); });
Check out this fiddle for a demo: http://jsfiddle.net/9hL7u95L/

***************************************************************************

Explains sameSite error and how to solve it
https://blog.heroku.com/chrome-changes-samesite-cookie

10/11/2020

Solved the major hurdle of DELETE, but I need to remove the stack
from the UI without refreshing the page manually

Remember, they get created with the dummy Ids first. 

You need to stamp them in the Well, then send them with a click
then right-click and delete them. Then refresh the page.

-----------------------------------------------------------------------

10/12/2020

Solved the refresh issue:
location.reload()

***************************************************************

Next step: Save a panel

1. Click the panel icon
2. Enter the information in the form that appears
3. Send the form
4. Click on the panel in the well and drag it to a stack
5. Release the panel on the stack

There is a difference between the POST to store a panel
in the panels collection and the PATCH that will nest the panel
inside a stack

Those two operations may be performed by one call however (not sure yet).

Step 1: Figure out how to POST a panel to the panel collection

Changed the name of the form in the column1 from panelForm to dataForm, since I want any 
item that needs to have data input to use it.

I need to:
1. Create an iframe
2. use the target attribute for the dataForm and send the 
   response to the iframe 

**********************************************************

Successfully posting to the panels collection and clearing the form
Used setTimeout for the form

*****************************************************************

Figured out how to use droppable on the elements created onload()
I needed to apply the draggable function to those elements because
they are completely new. They didn't have draggable applied to them.
Those stacks may look like the ones I created to initialize the 
sector, but they are actually copies based on the characteristics
of the original clones.

****************************************************************

Next Steps:

1. On dropping the panel on a stack, bring up a prompt to confirm you want to save. 
    
    I could...
    GET the id of the element sent to the database
    PATCH the stack (the panel is already in the 
    database, it was sent there when you POST dataForm)
    To do this you need the id of the panel you dropped on the stack
    
    ...or could I...
    use the value send back to panelSaved iframe?
    PATCH the stack

2. Position the panel absolute to the stack's position

Should I reload the page at this point?...

To make the iframe visible I:
  -changed the height and width of the panelSaved iframe
  -changed display from none to block

---------------------------------------------------------------------

10/13/2020

Useful drag and drop code (helped me solve the droppable problem)
    //$(function () {
  //  $(".well").droppable({
  //    tolerance: 'touch',
  //    drop: function (event, ui) {
  //     alert(event)
  //   }
  //  });
  //})

  //$(".well").on("dragover", function (event) {
  //  event.preventDefault();
  //  event.stopPropagation();
  //  $(this).addClass('dragging');
  //});

  //$(".well").on("dragleave", function (event) {
  //  event.preventDefault();
  //  event.stopPropagation();
  // $(this).removeClass('dragging');
  //});

  //$(".well").on("drop", function (event) {
  //  event.preventDefault();
  //  event.stopPropagation();
  //  console.log(this)
  //  alert("Dropped!");

****************************************************************

How to get JSON out of an iframe originating from the same domain:
https://stackoverflow.com/questions/6880967/how-to-access-json-from-an-iframe-originating-from-same-domain
  

******************************************************************

So on dropping the panel into the stack I want to do three things:

1. I want to append the panel to the stack element in the DOM
2. I want to send a PATCH request to the database:
   -the req.body will have an object that represents a
    stack with an updated panel array
   -the panel array will be holding the id of the panel 
    that was dropped on the stack
3. I retrieve the updated stack

---------------------------------------------------------------------

10/14/2020

Gutted the form's drop function. 
-action becomes /api/stack/:id
-method becomes PUT

There is still a relationship to the scope of the drop function
I can access it, it just seems the problem comes from trying to make
calls using $(ajax) or XHR. 

Q. Should I spend time trying to drop again?
   Or should I work on the "drill down" approach to clicking
   on a panel and saving it's data?

The drop idea is important to test XHR or $(ajax) calls outside of 
the form's scope. Or rather outside of the scope of the drop function
of the draggable class's methods

A. Do the drop attempt first. It may clarify some things about 
    Express, Mongoose, MongoDB, JS, and jQuery.

*******************************************************************

Thinking about listening for a class change on the panel then
triggering a call
https://www.seanmcp.com/articles/event-listener-for-class-change/

*******************************************************************

There is a way by using HTML5 drag and drop to transfer data between
the two elements, like the id of the first into the second
(panel's id into the stack)

https://www.w3schools.com/jsref/event_ondrop.asp

********************************************************************

Added $(form).draggable back to it's original position in the script
where it is being added to the forms/stacks onload

Still working on this tutorial:
https://www.youtube.com/watch?v=-JFkAaLOou8&t=435s

The output of the dragged element "ui" is more complex than I thought
it would be, but it seems to hold useful information.

------------------------------------------------------------------

10/15/2020

Code pen for aligning my panels with stacks:
http://jsfiddle.net/8cj0hty1/10/

Successfully bringing panels to the stack. 

The good thing about appending the panels to the stacks is that
they now get treated as a whole by the context menu. Right clicking
on a panel that has been appended to the stack will reveal the 
stack's context menu

********************************************************

Next step: Page-wide save

Just add a little button to the bottom

*****************************************************************

How to save everything

To each element created that has state, add the class .saveSector
Create a save button in the bottom left corner of the sector
When the click event for the save button is triggered:
  -Gather the elements in the class save in an iterable object
  -for each element in the object:
    -trigger it's saving process by sorting the objects by class:
      -First: stacks
      -Second: panels

Finally, reload the page and get the data from the collections
   -First: stacks
   -Second: panels


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
******************************************************************
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Trace the stacks path in the program and how I handle state
Mimic that path for the panels

1. Compare the models for the stacks and the panels
  -add top position and left position to panels model

2. Compare first state of the stack in the program with 
   first state of panels. Look at the elements and how they store
   state values. Mimic if necessary.

3. Use DOM scripting to produce the panels from a GET request
   made onload of the page

---------------------------------------------------------------------

   //code that creates the panels

The user clicks the panelIcon in the top left corner of the sector screen.
This appends a clone to the Well. It is initially invisible

A data form appears.

<form id="dataForm" name="dataForm" class="submission-form" action="/api/panel" method="POST" target="panelSaved"
        style="visibility: hidden;">

        <label for="size">Size:</label>
        <input type="text" name="size" autocomplete="off" required="required">
        <label for="tieStrips">Tie Strips:</label>
        <input type="text" name="tieStrips" autocomplete="off" required="required">
        <label for="linerType">Liner Type:</label>
        <input type="text" name="linerType" autocomplete="off" required="required">
        <label for="dowels">Dowels:</label>
        <input type="checkbox" name="dowels" autocomplete="off">
        <label for="r6">R6:</label>
        <input type="checkbox" name="r6" autocomplete="off">
        <label for="bigTies">Big Ties:</label>
        <input type="checkbox" name="bigTies" autocomplete="off">
        <label for="wall">Wall:</label>
        <input type="text" name="wall" autocomplete="off">
        <input type="submit" value="Send">
      </form>

-----------------------------------------------------------------------------

The form appears because of this code:

    $(function () {
      let flag = false;
      $('#panelIcon').click(function () {
        if (flag === false) {
          $("#dataForm").css("visibility", "visible");
        } else {
          $("#dataForm").css("visibility", "hidden");
          flag = false;
        }
      })
    })

------------------------------------------------------------------------------------

The submit for the form is triggered by the user clicking the submit button
<input type="submit" value="Send">

-------------------------------------------------------------------------------------

This action gets triggered with this method:
action="/api/panel" method="POST"

------------------------------------------------------------------------------------

The form's information is sent back to the route in req.body

    router.post('/api/panel', async (req, res) => {
      if (req.body !== null) {
        if (req.body.dowels === 'on') {
          req.body.dowels = true;
        }
        if (req.body.r6 === 'on') {
          req.body.r6 = true;
        }
        if (req.body.bigTies === 'on') {
          req.body.bigTies = true;
        }
      }

      const panel = new PanelModel(req.body);

      try {
        await panel.save();
        res.send(panel);
      } catch (err){
        res.status(500).send(err);
        console.log(err)
      }
    });

---------------------------------------------------------------------------------------------

At this point in my new panel's model, the panels should be sending back nothing for topPosition and leftPosition
even though the model knows the properties exist:

const mongoose = require('mongoose');

const PanelSchema = new mongoose.Schema({
  size: {
    type: String,
    required: true
  },
  tieStrips: {
    type: Number,
    required: true
  },
  linerType: {
    type: String,
    required: true
  },
  dowels: {
    required: false
    type: Boolean,
  },
  r6: {
    type: Boolean,
    required: false
  },
  bigTies: {
    type: Boolean,
    required: false 
  },
  wall: {
    type: String,
    required: false
  },
  leftPosition: String,
  topPosition: String,
});

const Panel = mongoose.model('Panel', PanelSchema);
module.exports = Panel;

------------------------------------------------------------------------------

The router attempts to save the panel created from the 
      const panel = new PanelModel(req.body);

The res returns and is saved here:

      <iframe id="panelIframe" name="panelSaved" display="none"
        style="width:0; height:0; border:0; border:none"></iframe>

This response holds the id of the panel assigned by the database
The response data is still in the iframe, not represented in the window by anything

---------------------------------------------------------------------------------------------

Over in the Well, a panel appears because of this code:

    $(function () {
      $("#panelIcon").click(function () {
        $("#panelIcon")
          .clone()
          .appendTo("#well0")
          .draggable({ cancel: false })
          .attr('id', 'panelIconClone')
          .droppable()
          .css("visibility", "hidden");

        //code that makes the panel clone visible in the well
        //and hides the dataForm so you can't add another panel clone 
        //without selecting the panel icon
        let dataForm = document.getElementById('dataForm');
        let well = document.body.children[1].children[1].children[1].children[2];
        dataForm.addEventListener('submit', () => {
          well.lastElementChild.style.visibility = "visible";
          dataForm.style.visibility = "hidden";
        })
      })
    });

This panel has an id of panelIconClone, because that is what it is, a clone of the 
panelIcon in the top left corner of the application. The clone gets appended to the 
well and assigned the id panelIconClone. 

-----------------------------------------------------------------------------------

The panelIconClone's position can be saved by clicking the Well

  document.addEventListener('click', (event) => {
    if (event.target !== well) return;
    let sectorElementsArray = [...wellChildrenElements];
    if (sectorElementsArray.length === [].length) {
      console.log("No stacks in the Yard");
    }
    else {
      for (let index = 0; index <= sectorElementsArray.length - 1; index++) {
        let dragposition = {
          left: sectorElementsArray[index].style.left,
          top: sectorElementsArray[index].style.top
        };
        if (sectorElementsArray[index].classList.contains('stack')) {
          sectorElementsArray[index].classList.add("dropped");
          sectorElementsArray[index].classList.add("saveSector");
          sectorElementsArray[index].children[0].value = dragposition.left;
          sectorElementsArray[index].children[1].value = dragposition.top;

        } else {
          sectorElementsArray[index].classList.add("saveSector");
          sectorElementsArray[index].style.left = dragposition.left;
          sectorElementsArray[index].style.top = dragposition.top;
        }
      }
    }
  });

The panelIconClone is now a member of the sectorElementsArray

------------------------------------------------------------------------------------

Clicking on the panelIconClone after it has been saved in the sectorElementsArray
assigns the panel a new id value. This value is what was saved in the <iframe>
from the response (res) by the router.

-----------------------------------------------------------------------------------

A class .panelIdentified is assigned to the event.target

-----------------------------------------------------------------------------------

The position property of event.target is set to "absolute"
The top property is set to '2px'
The left property is set to '0px'
Using the newly assigned class .panelIdentified, we make the element draggable

------------------------------------------------------------------------------------

Back when we assigned the element to the sectorElementsArray, we also assigned
the panel to the .saveSector class

So what I need to do for the panels is a PATCH request, where I update
the state of the panels in the sectorElementsArray

----------------------------------------------------------------------------------------

//code that creates a stack



A stackIcon is cloned from an element at the top left of the sector

  $(function () {
      let cloneId = 0;

      $("#stackIcon").click(function () {
        $("#stackIcon")
          .clone()
          .appendTo("#well0")
          .draggable({
            cancel: false,
            containment: "document"
          })
          .attr('class', 'stack created')
          .attr('id', 'id' + cloneId++)
          .droppable();
      })
    });


This is the element that was cloned:
   <form id="stackIcon" name="stackIcon" class="stack" action="/api/stack" method="POST" onsubmit="return false;"
        target="stackSaved">
        <input type="hidden" name="left" value="">
        <input type="hidden" name="top" value="">
      </form>

The #stackIcon clone is appended to the Well and assigned a temporary id (id*) by the cloneId variable


---------------------------------------------------------------------------

When the #stackIcon was created, it was created with hidden input fields.
This is a functionality of forms. Hidden input fields are often used to store data that will
be passed back to a server. We use these inputs for the same purpose here. We want to track the position
of the stacks in the window

	<input type="hidden" name="left" value="">
  <input type="hidden" name="top" value="">

Each one is initialized to null and given a name of one of the property values they will be storing

This same functionality is inherited by all the clones of #stackIcon

---------------------------------------------------------------------------------------

After the #stackIcon clone appears in the Well, there are two necessary actions
 to perform in this order:

Action 1. We must click on the Well. This action:
-saves the position of the stack
-adds the class .dropped

Action 2. We must click on the stack. This action:
-submits the stack, which is actually just a form element

------------------------------------------------------------------------------------------

Action 1 - When we click on the Well, this happens:

  document.addEventListener('click', (event) => {
    if (event.target !== well) return;
    let sectorElementsArray = [...wellChildrenElements];
    if (sectorElementsArray.length === [].length) {
      console.log("No stacks in the Yard");
    }
    else {
      for (let index = 0; index <= sectorElementsArray.length - 1; index++) {
        let dragposition = {
          left: sectorElementsArray[index].style.left,
          top: sectorElementsArray[index].style.top
        };
        if (sectorElementsArray[index].classList.contains('stack')) {
          sectorElementsArray[index].classList.add("dropped");
          sectorElementsArray[index].classList.add("saveSector");
          sectorElementsArray[index].children[0].value = dragposition.left;
          sectorElementsArray[index].children[1].value = dragposition.top;

        } else {
          sectorElementsArray[index].classList.add("saveSector");
          sectorElementsArray[index].style.left = dragposition.left;
          sectorElementsArray[index].style.top = dragposition.top;
        }
      }
    }
  });

The stack/form element gets .dropped added to it's class list

The stack/form's children, the hidden input elements, are assigned values based on
the position of the stack/form in the window

These values are now a part of the form 

-----------------------------------------------------------------------------------
Action 2 - When we click on the stack, this happens:

  document.addEventListener('click', (event) => {
    if (!event.target.classList.contains('dropped')) {
      return;
    } else {
      event.target.submit();
      alert('The stack is saved')
    }
  });

We submit the form
When the stack/form is submitted, it calls...

action="/api/stack" 

using...
method="POST"

The position in the window where we perform Action 2 is where the stack will be pinned

----------------------------------------------------------------------------------

router.post('/api/stack', async (req, res) => {
  const stack = new StackModel(req.body);
  stack.count = 0;
  stack.top = 5;
  stack.leftPosition = req.body.left;
  stack.topPosition = req.body.top;
  try {
    await stack.save();
    res.send(stack);
  } catch (err) {
    res.status(500).send('Stack not saved');
    console.log(err);
  }
});

left and top are the names of the hidden input fields.

We can use these names in the req.body to access their values.

We can then assign those values to the 
stack's leftPosition and topPosition properties.

We defined  these properties in the model for the stacks:



const mongoose = require('mongoose');

const StackSchema = new mongoose.Schema({
  panel: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Panel',
    },
  ],
  top: Number,
  count: {
    type: Number,
    required: true,
  },
  leftPosition: String,
  topPosition: String,
});

const Stack = mongoose.model('Stack', StackSchema);
module.exports = Stack;


We save a stack object, really a JSON object, to the database

    await stack.save();


--------------------------------------------------------------------------

An alert appears to let us know we saved the stack

      alert('The stack is saved')

-----------------------------------------------------------------------------

When the stack is saved we call this
    res.send(stack);

and send the result here...

   <iframe id="stackIframe" name="stackSaved" display="none"
        style="width:0; height:0; border:0; border:none"></iframe>

by using this value...
target="stackSaved"

We did this to stop the automatic redirect of the page by the stacks on the page

--------------------------------------------------------------------------------

If we reload our page, our work disappears.

We need to recreate our stacks when the page loads


  window.addEventListener('load', (event) => {
    let xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200) {
        //.parse() converts the response to a JS object
        let stacks = JSON.parse(xhttp.responseText);
        stacks.forEach((stack, index) => {
          let well = document.body.children[1].children[1].children[1].children[2];
          let form = document.createElement('form');
          form.setAttribute('id', stack._id);
          form.setAttribute('name', 'stackIcon');
          form.setAttribute('class', 'stack created draggable droppable dropped');
          form.setAttribute('action', '/api/stack:id');
          form.setAttribute('method', 'PATCH');
          form.setAttribute('onsubmit', 'return false;');
          form.setAttribute('target', 'stackSaved');
          let leftInput = document.createElement('input');
          leftInput.setAttribute('type', 'hidden');
          leftInput.setAttribute('name', 'left');
          leftInput.setAttribute('value', stack.leftPosition);
          let topInput = document.createElement('input');
          topInput.setAttribute('type', 'hidden');
          topInput.setAttribute('name', 'top');
          topInput.setAttribute('value', stack.topPosition);
          form.appendChild(leftInput);
          form.appendChild(topInput);
          form.style.left = stack.leftPosition;
          form.style.top = stack.topPosition;

...more code...

    well.appendChild(form);
        });
      }
    };

    xhttp.open("GET", "http://localhost:3000/api/stacks", true);
    xhttp.send();
  });

----------------------------------------------------------------------------

We create our stacks by querying the database using a GET request

router.get('/api/stacks', async (req, res) => {
  const stacks = await StackModel.find({});
  //res.send('Stacks route');

  try {
    res.send(stacks);
  } catch (err) {
    res.status(500).send('Stacks not retrieved');
    console.log(err);
  }
});

The resource is found at http://localhost:3000/api/stacks

It stores everything we sent in the req.body for each stack we created
in an array of those stacks

It returns the elements in an array-like structure that we iterate over:
-creating new form elements for each of the JS objects that we parsed
-assigning these form elements positions from the stack data we retrieved
and
-appending these forms to the Well

Basically we created them out of thin air based on our previous description
(abstraction) of what the forms characteristics were

We also:
-added 'stack created draggable droppable dropped' to the classlist
     form.setAttribute('class', 'stack created draggable droppable dropped');

-changed the action from /api/stacks to /api/stack:id for our new stack/form representation
          form.setAttribute('action', '/api/stack:id');

-changed the CRUD method to PATCH for our new stack/form representation
          form.setAttribute('method', 'PATCH');

These stacks fill the sector onload of the window

----------------------------------------------------------------------------------

When we made our stacks out of thin air, we also included this code:

  //makes the stacks from storage droppable and 
          //brings their panels into position
          $(form).droppable({
            tolerance: "touch",
            drop: function (event, ui) {
              $(event.target).append(ui.draggable);
              let blueStack = $(this).offset();
              let panel = ui.draggable.offset();
              let left_end = blueStack.left - panel.left;
              let top_end = blueStack.top - panel.top + 2;
              ui.draggable.animate({
                top: '+=' + top_end,
                left: '+=' + left_end
              }, 0);
            }
          })

This functionality will be useful later, as we interact with other components in
the application

--------------------------------------------------------------------------------------------

We added deleting a stack

We also added a context menu to the stack

-------------------------------------------------------------------------------------




----------------------------------------------------------------------

Finish the task of passing the data from inside one element into the 
next. This is how you will get the panel Ids into the stack elements

This must be done BEFORE you PATCH the stacks in the sector
in preparation for the big save call for the page.

This is done using jQuery or HTML5. In either idiom you have the choice
when using dragging to pass data between the elements

https://www.w3schools.com/jsref/event_ondrop.asp

------------------------------------------------------------------

Not sure where I saw the jQuery version of passing data by dragging
and dropping, but here's a good start:

https://stackoverflow.com/questions/30992692/jquery-draggable-droppable-pass-ids-to-ajax

----------------------------------------------------------------

Drill down to the children of the stack and get the length 
of the HTML collection

For each element in a stack:
-pass the id of the dragged element to the target element
-the target element should store the ids in a holder array
-the values in that holder array should be passed back to the req.body
 to be saved in the panel property of the JSON object we will be
 sending as a patch to the data in the database


---------------------------------------------------------------------

10/16/2020

Looks like a more solid solution to the drag n' drop problem:

https://stackoverflow.com/questions/28602356/jquery-dnd-how-to-pass-data-associated-with-an-element-being-dragged

$(function(){
    $(".draggable").draggable({
        start: function(e) {
            $(this).data('id', 3);
        }
    });
    $(".droppable").droppable({
        drop: function(e, ui) {
            var id = ui.draggable.data('id');
            console.log(id);
        }
    })
});

where:

.data( key, value );

key
-Type: String
-a string naming the piece of data to set.

value
-Type: Anything
the new data value; this can be any Javascript type except undefined.

---------------------------------------------------------------------------------


The second time I click a stack, one with a panel on it, it sends a GET to:

 http://localhost:3000/api/stack:id?left=181px&top=49px

These stacks are the ones created onload

It appears the query parameters are the hidden inputs I re-assign when I create
the panel.

TODO:

1. Remove the assignments to left and top.
2. Place the value of id in a hidden input
3. You cannot set PATCH as an attribute in a form. The browser defaults to GET
  -set the method attribute to GET
4. Keep the action attribute as /api/stack/:id

On left-click of a stack, we will view the stack in a component we reveal in the 
window. The component will show the stack and it's panels

On right-click we will still be able to select View, it will just be another way 
to access a view of the stack

--------------------------------------------------------------------------------------

.hasPanels 
-class added to the stacks when a panel is dropped on the stack



Pass the panels' Ids to an array and pass that array to 
the panel array of the stack

 SET panelArray = [];
 SET panelIdArray = [];

  document.addEventListener('click', (event) => {
    if(!event.target.CLASSLIST.INCLUDES('hasPanel')) {
      panelArray = [...event.target.children];
      panelArray.forEach((panel, index) => {
      if(panel.CLASSLIST.INCLUDES('panel')) {
        panelIdArray[index] = panel.id;
        }
        event.target.panel = panelIdArray
      })
    }
  )}

------------------------------------------------------------------------

10/17/2020

New potential solution: 
Try exporting/importing the variables you need.
Think about how the application should actually be structured right now.
Can you move the parts around, then export the variables that contain
the panel information into the stacks.js model file?

----------------------------------------------------------------------

10/18/2020

Could this be the Grail? (I think it is!)
https://stackoverflow.com/questions/19840509/sending-put-delete-data-with-a-xmlhttprequest

Update a user

var url = "http://localhost:8080/api/v1/users";

var data = {};
data.firstname = "John2";
data.lastname  = "Snow2";
var json = JSON.stringify(data);

var xhr = new XMLHttpRequest();
xhr.open("PUT", url+'/12', true);
xhr.setRequestHeader('Content-type','application/json; charset=utf-8');
xhr.onload = function () {
    var users = JSON.parse(xhr.responseText);
    if (xhr.readyState == 4 && xhr.status == "200") {
        console.table(users);
    } else {
        console.error(users);
    }
}
xhr.send(json);

I have regained control of req.body... Whew!
--------------------------------------------------------------------------------------

You next need to render the updated stacks when you reload the page

You are not currently tracking the position of the panels
You don't need to track the position of the panels, since
you are just materializing them based on their JSON characteristics

When you assign the panels properties, assign them position.
 

--------------------------------------------------------------------------

10/19/2020

A thought about the main.js file I could add to the public folder:

I could make it the map of the yard with the sectors

CODE FREEZE!

------------------------------------------------------------------


10/21/2020

Broke the CODE FREEZE because I thought (correctly) that I could get
the panels rendering in the stack close-up in a few hours. 

Still need to add styling to the text, but I can't directly style text
nodes. I have to wrap them in divs or h1 tags...

...or I can turn them into h1 tags and style them directly

------------------------------------------------------------------------

10/23/2020

Completed styling the h2 tags that are wrapping the text nodes. 

-------------------------------------------------------------------------

10/24/2020

Deploying the completed prototype to Heroku
https://devcenter.heroku.com/articles/github-integration#manual-deploys

Getting a CORS error, this looks helpful as a lead:
https://stackoverflow.com/questions/53875548/cors-problems-on-heroku

Check this out also:
https://auth0.com/blog/cors-tutorial-a-guide-to-cross-origin-resource-sharing/


Try these Google searches:
cors node heroku
heroku access control allow origin
node.js bypass cors
cors problem on heroku
heroku enable cors
express cors not working
----------------------------------------------------------------------------

11/13/2020

This code...

  //Saves a newly created stack by left-clicking on stack
  document.addEventListener('click', (event) => {
    if (!event.target.classList.contains('dropped')) {
      return;
    } else {
      event.target.submit();
      location.reload();
    }
  });

...becomes this code:

 //Saves a newly created stack by left-clicking on stack
          sectorElementsArray[index].submit();
          location.reload();

...in the method above it.
I needed to make:

event.target.submit();

into this: 

sectorElementsArray[index].submit();

Now the SAVE NEW STACKS button works, and you don't have to click on
the new stack to send the information to the database. Just create a clone
then click SAVE NEW STACKS

-------------------------------------------------------------------------

Certain events in the program, such as assigning an Id to a panel, previously
used a click event.

What I realized today is that those unnecessary clicks, that I was treating
like scaffolding, could be changed to 'mousedown' events. This way
on mousedown, the AJAX calls are immediately started. 

Instead of having to click the panel, then click again to grab the panel
you just press down on the left mouse button.

Essentially, the functionality of performing an action upon grabbing an element
can be defined by using mousedown. That action can be carried out in the 
background.

----------------------------------------------------------------------------------

I changed the color of the stack clones that arrive in the Well. They remain
yellow with a mustard border until the user clicks the SAVE NEW STACKS button


--------------------------------------------------------------------------------------

11/14/2020

In the method call for edit mode of the stacks, I have a variable:

rightClickedStack.id

I need to somehow save that value in the DOM element, because AFTER the edit mode 
click event method is completed, I need to use that value in a new event listener

That new event listener is going to query the database, filtering out the stack
I select in the edit mode view, and re-render the edit mode view without the
deleted stack. It will also take that stack out of the database in both the 
stack collection and the panel collection, since those two collections are 
not connected. I don't have cascading deletes set up. Thus two API calls, I think.

*************************************************************************************

So rightClickedStack is available globally. Each time I right click a stack
the value in 

rightClickedStack

is updated with the data of the current stack. This means I have access to the
id of the last clicked stack even at the end of the edit mode event handler call

So I don't need to worry about saving the id in the DOM element.
The new event listener will have access to the id of the stack that last had edit
mode called

What I need to do is set a custom data attribute on each of the panel elements in the
edit mode. The value for the data attribute will be rightClickedStack.id

https://stackoverflow.com/questions/11286661/set-custom-attribute-using-javascript

That way I have access to the stack that each of these panel elements in the view
is associated with.

That way when I click on one of those panels and trigger an event on the panel
as an event target, I will be able to use both the panel id and the stack id
in the queries I need to make to delete the panel not only from the UI but also the 
database.

------------------------------------------------------------------------------------

11/15/2020

Modified the code for the stack viewer in the UI. It accurately allows
the user to delete any stack they wish by left clicking on the stack

The code modifies rightClickedStack with each delete, removing the
div child nodes that have ids that match the click event.target elements
in the viewer (the panelsInSlot h2 elements)

Now I need to send the rightClickedStack back to the routes api to update
each time we delete one of it's child nodes

